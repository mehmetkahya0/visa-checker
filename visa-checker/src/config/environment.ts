import dotenv from "dotenv";
import cron from "node-cron";

dotenv.config();

/**
 * √áevre deƒüi≈ükenleri i√ßin tip tanƒ±mlamalarƒ±
 */
export interface EnvironmentConfig {
  // Telegram ile ilgili yapƒ±landƒ±rmalar
  telegram: {
    botToken: string; // Telegram bot token'ƒ±
    channelId: string; // Telegram kanal ID'si
    rateLimit: number; // Dakikada g√∂nderilebilecek maksimum mesaj sayƒ±sƒ±
    retryAfter: number; // Rate limit a≈üƒ±ldƒ±ƒüƒ±nda beklenecek s√ºre (ms)
  };
  // Uygulama genel yapƒ±landƒ±rmalarƒ±
  app: {
    checkInterval: string; // Kontrol sƒ±klƒ±ƒüƒ± (cron formatƒ±nda)
    targetCountry: string; // Kaynak √ºlke (Turkiye)
    targetCities: string[]; // Takip edilecek ≈üehirler listesi
    missionCountries: string[]; // Hedef √ºlkeler listesi
    targetSubCategories: string[]; // Takip edilecek subkategoriler listesi
    debug: boolean; // Hata ayƒ±klama modu
  };
  // API ile ilgili yapƒ±landƒ±rmalar
  api: {
    visaApiUrl: string; // Vize API'sinin adresi
    maxRetries: number; // Maksimum deneme sayƒ±sƒ±
    retryDelayBase: number; // Denemeler arasƒ± bekleme s√ºresi (ms)
    restartToken: string; // Web API restart token'ƒ±
  };
  // √ñnbellek yapƒ±landƒ±rmalarƒ±
  cache: {
    maxSize: number; // Maksimum √∂nbellek boyutu
    cleanupInterval: number; // Temizleme sƒ±klƒ±ƒüƒ± (ms)
  };
}

/**
 * √áevre deƒüi≈ükenlerini doƒürular ve yapƒ±landƒ±rma nesnesini olu≈üturur
 * @returns Doƒürulanmƒ±≈ü yapƒ±landƒ±rma nesnesi
 * @throws Eksik veya hatalƒ± yapƒ±landƒ±rma durumunda hata fƒ±rlatƒ±r
 */
function validateEnvironment(): EnvironmentConfig {
  // Zorunlu √ßevre deƒüi≈ükenlerini kontrol et
  const requiredEnvVars = {
    TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID: process.env.TELEGRAM_CHAT_ID,
  };

  // Eksik deƒüi≈ükenleri bul
  const missingVars = Object.entries(requiredEnvVars)
    .filter(([_, value]) => !value)
    .map(([key]) => key);

  // Eksik deƒüi≈üken varsa hata fƒ±rlat
  if (missingVars.length > 0) {
    console.error(`Eksik √ßevre deƒüi≈ükenleri: ${missingVars.join(", ")}`);
    process.exit(1);
  }

  // Telegram kanal ID'sini doƒürula
  const channelId = process.env.TELEGRAM_CHAT_ID;
  if (!channelId || !/^-?\d+$/.test(channelId)) {
    console.error("Ge√ßersiz TELEGRAM_CHAT_ID formatƒ±");
    process.exit(1);
  }

  // ≈ûehirleri virg√ºlle ayrƒ±lmƒ±≈ü listeden diziye √ßevir
  const cities = process.env.CITIES
    ? process.env.CITIES.split(",").map((city) => city.trim())
    : [];

  // Hedef √ºlkeleri virg√ºlle ayrƒ±lmƒ±≈ü listeden diziye √ßevir
  const missionCountries = process.env.MISSION_COUNTRY
    ? process.env.MISSION_COUNTRY.split(",")
        .map((country) => country.trim().toLowerCase())
        .filter((country) => country.length > 0) // Bo≈ü elemanlarƒ± filtrele
    : ["grc"]; // Varsayƒ±lan deƒüer

  // Debug: Mission countries'i logla
  console.log(`üîç Debug Environment: MISSION_COUNTRY env var: "${process.env.MISSION_COUNTRY}"`);
  console.log(`üîç Debug Environment: Parsed mission countries:`, missionCountries);

  // Parse subcategories from env
  const subCategories = process.env.VISA_SUBCATEGORIES
    ? process.env.VISA_SUBCATEGORIES.split(",").map((cat) => cat.trim())
    : [];

  // Validate CRON format
  const rawCheckInterval = process.env.CHECK_INTERVAL || "*/5 * * * *";
  console.log(`üîç Environment Debug - CHECK_INTERVAL: "${rawCheckInterval}"`);
  
  // CRON format doƒürulamasƒ±
  let checkInterval = rawCheckInterval;
  if (!cron.validate(rawCheckInterval)) {
    console.error(`‚ùå Ge√ßersiz CRON formatƒ± tespit edildi: "${rawCheckInterval}"`);
    console.error(`‚ÑπÔ∏è Ge√ßerli CRON format √∂rnekleri:`);
    console.error(`   - Her dakika: "* * * * *"`);
    console.error(`   - Her 2 dakika: "*/2 * * * *"`);
    console.error(`   - Her 5 dakika: "*/5 * * * *"`);
    console.error(`   - Her saat ba≈üƒ±: "0 * * * *"`);
    
    // Varsayƒ±lan deƒüere d√∂n
    checkInterval = "*/5 * * * *";
    console.warn(`‚ö†Ô∏è Varsayƒ±lan CRON formatƒ±na d√∂n√ºl√ºyor: "${checkInterval}"`);
  } else {
    console.log(`‚úÖ CRON formatƒ± ge√ßerli: "${checkInterval}"`);
  }

  // Target country doƒürulamasƒ± ve d√∂n√º≈ü√ºm√º
  let targetCountry = process.env.TARGET_COUNTRY?.toLowerCase() || "tur";
  
  // "tr" -> "tur" d√∂n√º≈ü√ºm√º
  if (targetCountry === "tr") {
    targetCountry = "tur";
    console.log(`üîÑ Target country "tr" -> "tur" olarak d√∂n√º≈üt√ºr√ºld√º`);
  }

  // Yapƒ±landƒ±rma nesnesini olu≈ütur ve d√∂nd√ºr
  return {
    telegram: {
      botToken: process.env.TELEGRAM_BOT_TOKEN as string,
      channelId,
      rateLimit: Number(process.env.TELEGRAM_RATE_LIMIT_MINUTES) || 15,
      retryAfter: Number(process.env.TELEGRAM_RETRY_AFTER) || 5000,
    },
    app: {
      checkInterval: checkInterval,
      targetCountry: targetCountry,
      targetCities: cities,
      missionCountries,
      targetSubCategories: subCategories,
      debug: process.env.DEBUG === "true",
    },
    api: {
      visaApiUrl:
        process.env.VISA_API_URL || "https://api.visasbot.com/api/visa/list",
      maxRetries: Number(process.env.MAX_RETRIES) || 3,
      retryDelayBase: Number(process.env.RETRY_DELAY_BASE) || 1000,
      restartToken: process.env.RESTART_TOKEN || "default-restart-token",
    },
    cache: {
      maxSize: Number(process.env.MAX_CACHE_SIZE) || 1000,
      cleanupInterval:
        Number(process.env.CACHE_CLEANUP_INTERVAL) || 24 * 60 * 60 * 1000,
    },
  };
}

// Yapƒ±landƒ±rma nesnesini olu≈ütur ve dƒ±≈üa aktar
export const config = validateEnvironment();
