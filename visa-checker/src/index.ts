import cron from 'node-cron';
import { config } from './config/environment';
import { cacheService } from './services/cache';
import { telegramService } from './services/telegram';
import { startWebServer } from './services/webServer';
import { checkAppointments } from './utils/appointmentChecker';

// Global variables for CRON job management
let cronJob: cron.ScheduledTask | null = null;
let isRunning = false;

/**
 * Ana uygulama ba≈ülatma fonksiyonu
 */
async function startApplication(): Promise<void> {
  try {
    console.log('üöÄ Visa Checker Bot ba≈ülatƒ±lƒ±yor...');
    console.log('üìä Ba≈ülatma adƒ±mlarƒ±:');
    
    // 1. Web server'ƒ± ba≈ülat
    console.log('1Ô∏è‚É£ Web server ba≈ülatƒ±lƒ±yor...');
    startWebServer();
    console.log('‚úÖ Web server ba≈ülatƒ±ldƒ±');
    
    // 2. √ñnbellek sistemini ba≈ülat
    console.log('2Ô∏è‚É£ √ñnbellek sistemi ba≈ülatƒ±lƒ±yor...');
    cacheService.startCleanupInterval();
    console.log('‚úÖ √ñnbellek sistemi ba≈ülatƒ±ldƒ±');
    
    // 3. CRON formatƒ±nƒ± doƒürula
    console.log('3Ô∏è‚É£ CRON format kontrol√º...');
    console.log(`üîç CRON pattern: ${config.app.checkInterval}`);
    if (!cron.validate(config.app.checkInterval)) {
      console.error(`‚ùå Ge√ßersiz CRON formatƒ±: ${config.app.checkInterval}`);
      throw new Error(`Ge√ßersiz CRON formatƒ±: ${config.app.checkInterval}`);
    }
    console.log(`‚úÖ CRON format ge√ßerli`);

    // 4. Telegram botunu ba≈ülat (timeout ile)
    console.log('4Ô∏è‚É£ Telegram bot ba≈ülatƒ±lƒ±yor...');
    try {
      // 30 saniye timeout ile Telegram bot ba≈ülat
      await Promise.race([
        telegramService.startBot(),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Telegram bot timeout')), 30000)
        )
      ]);
      console.log('‚úÖ Telegram bot ba≈ülatƒ±ldƒ±');
      
      // 5. Ba≈ülangƒ±√ß bildirimini g√∂nder
      console.log('5Ô∏è‚É£ Ba≈ülangƒ±√ß bildirimi g√∂nderiliyor...');
      const notificationSent = await telegramService.sendStartupNotification();
      if (notificationSent) {
        console.log('‚úÖ Ba≈ülangƒ±√ß bildirimi g√∂nderildi');
      } else {
        console.log('‚ö†Ô∏è Ba≈ülangƒ±√ß bildirimi g√∂nderilemedi ama devam ediliyor');
      }
    } catch (telegramError) {
      const errorMsg = telegramError instanceof Error ? telegramError.message : String(telegramError);
      console.error('‚ö†Ô∏è Telegram bot ba≈ülatƒ±lamadƒ±:', errorMsg);
      console.log('üìã Telegram olmadan devam ediliyor - CRON job √ßalƒ±≈üacak...');
    }

    // 6. Zamanlanmƒ±≈ü g√∂revi ba≈ülat
    console.log('6Ô∏è‚É£ CRON job olu≈üturuluyor...');
    cronJob = cron.schedule(config.app.checkInterval, async () => {
      if (isRunning) {
        console.log(`‚ö†Ô∏è √ñnceki kontrol hala √ßalƒ±≈üƒ±yor, bu kontrol atlanƒ±yor...`);
        return;
      }
      
      isRunning = true;
      const startTime = new Date().toISOString();
      console.log(`\nüîÑ ZAMANLANMI≈û KONTROL BA≈ûLADI - ${startTime}`);
      
      try {
        await checkAppointments();
        const endTime = new Date().toISOString();
        console.log(`‚úÖ ZAMANLANMI≈û KONTROL TAMAMLANDI - ${endTime}\n`);
      } catch (error) {
        const errorTime = new Date().toISOString();
        console.error(`‚ùå ZAMANLANMI≈û KONTROL HATASI - ${errorTime}:`, error);
        
        // Hata bildirimini g√∂nder ama √ß√∂kmesini engelle
        try {
          await telegramService.sendErrorNotification('Zamanlanmƒ±≈ü kontrol hatasƒ±', String(error));
        } catch (notificationError) {
          console.error('Hata bildirimi g√∂nderilemedi:', notificationError);
        }
      } finally {
        isRunning = false;
      }
    }, {
      scheduled: false, // ƒ∞lk olarak false, sonra start() ile ba≈ülatacaƒüƒ±z
      timezone: "Europe/Istanbul"
    });
    
    // CRON job'ƒ± ba≈ülat
    cronJob.start();
    console.log(`‚úÖ CRON Job ba≈ülatƒ±ldƒ± ve √ßalƒ±≈üƒ±yor`);
    
    // 7. Sistem konfig√ºrasyonunu g√∂ster
    console.log('\nüìä Sƒ∞STEM KONFIG√úRASYONU:');
    console.log(`üéØ Hedef √ºlke: ${config.app.targetCountry}`);
    console.log(`üèõÔ∏è Mission √ºlkeler: ${config.app.missionCountries.join(', ')}`);
    if (config.app.targetCities.length > 0) {
      console.log(`üèôÔ∏è Hedef ≈üehirler: ${config.app.targetCities.join(', ')}`);
    }
    if (config.app.targetSubCategories.length > 0) {
      console.log(`üìÑ Hedef vize tipleri: ${config.app.targetSubCategories.join(', ')}`);
    }
    console.log(`üêõ Debug modu: ${config.app.debug}`);
    
    // CRON job bilgilerini g√∂ster
    const now = new Date();
    console.log(`\n‚è∞ CRON JOB Bƒ∞LGƒ∞LERƒ∞:`);
    console.log(`   - Pattern: ${config.app.checkInterval}`);
    console.log(`   - Timezone: Europe/Istanbul`);
    console.log(`   - ≈ûu anki zaman: ${now.toISOString()}`);
    
    // Debug i√ßin bir sonraki √ßalƒ±≈ütƒ±rma zamanƒ±nƒ± tahmin et
    if (config.app.checkInterval === "* * * * *") {
      const nextMinute = new Date(now.getTime() + 60000);
      nextMinute.setSeconds(0, 0);
      console.log(`   - Bir sonraki √ßalƒ±≈üma (tahmini): ${nextMinute.toISOString()}`);
    } else if (config.app.checkInterval.startsWith("*/")) {
      const interval = parseInt(config.app.checkInterval.split("/")[1]);
      const nextRun = new Date(now);
      nextRun.setMinutes(Math.ceil(now.getMinutes() / interval) * interval, 0, 0);
      console.log(`   - Bir sonraki √ßalƒ±≈üma (tahmini): ${nextRun.toISOString()}`);
    }

    // 8. ƒ∞lk manuel kontrol√º yap
    console.log('\n8Ô∏è‚É£ ƒ∞lk manuel kontrol ba≈ülatƒ±lƒ±yor...');
    try {
      await checkAppointments();
      console.log('‚úÖ ƒ∞lk kontrol tamamlandƒ±');
    } catch (error) {
      console.error('‚ùå ƒ∞lk kontrol hatasƒ±:', error);
      // ƒ∞lk kontrol ba≈üarƒ±sƒ±z olsa da sistem √ßalƒ±≈ümaya devam etsin
    }

    // 9. Sistem monitoring ba≈ülat
    console.log('\n9Ô∏è‚É£ Sistem monitoring ba≈ülatƒ±lƒ±yor...');
    let testCount = 0;
    const maxTests = 3; // ƒ∞lk 3 test sonra durdur
    
    const testInterval = setInterval(() => {
      testCount++;
      const now = new Date();
      console.log(`\n‚è∞ Monitoring ${testCount}/${maxTests} - (${now.toISOString()}):`);
      console.log(`   - CRON Pattern: ${config.app.checkInterval}`);
      console.log(`   - ƒ∞≈ülem durumu: ${isRunning ? '√áalƒ±≈üƒ±yor' : 'Beklemede'}`);
      console.log(`   - Uptime: ${Math.floor(process.uptime())} saniye`);
      console.log(`   - Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
      
      if (testCount >= maxTests) {
        clearInterval(testInterval);
        console.log(`\n‚úÖ ƒ∞lk monitoring tamamlandƒ±. Sistem √ßalƒ±≈ümaya devam ediyor...`);
        console.log(`üî• Visa Checker Bot tamamen hazƒ±r!`);
        console.log(`üì± /debug komutu ile manuel test yapabilirsiniz`);
      }
    }, 30000); // Her 30 saniyede test

    // 10. Graceful shutdown handler
    setupGracefulShutdown(cronJob);
    
    console.log('\nüéâ T√úM BA≈ûLATMA ADIMLAR TAMAMLANDI!');
    console.log('‚úÖ Bot ≈üimdi otomatik olarak randevularƒ± kontrol ediyor...\n');
    
  } catch (error) {
    console.error('\n‚ùå Uygulama ba≈ülatƒ±lamadƒ±:', error);
    try {
      await telegramService.sendErrorNotification('Uygulama ba≈ülatƒ±lamadƒ±', String(error));
    } catch (notificationError) {
      console.error('Ba≈ülatma hatasƒ± bildirimi g√∂nderilemedi:', notificationError);
    }
    process.exit(1);
  }
}

/**
 * Graceful shutdown i≈ülemlerini ayarlar
 */
function setupGracefulShutdown(cronJob: cron.ScheduledTask | null): void {
  const shutdown = async (signal: string) => {
    console.log(`\n${signal} sinyali alƒ±ndƒ±. Uygulama kapatƒ±lƒ±yor...`);
    
    try {
      // CRON job'ƒ± durdur
      if (cronJob) {
        cronJob.stop();
        console.log('CRON job durduruldu.');
      }
      
      // Shutdown bildirimini g√∂nder
      await telegramService.sendShutdownNotification();
      
      // Telegram servisi temizliƒüi
      telegramService.cleanup();
      
      console.log('Uygulama g√ºvenli ≈üekilde kapatƒ±ldƒ±.');
      process.exit(0);
    } catch (error) {
      console.error('Shutdown sƒ±rasƒ±nda hata:', error);
      process.exit(1);
    }
  };

  // √áe≈üitli shutdown sinyallerini dinle
  process.on('SIGTERM', () => shutdown('SIGTERM'));
  process.on('SIGINT', () => shutdown('SIGINT'));
  process.on('SIGUSR1', () => shutdown('SIGUSR1'));
  process.on('SIGUSR2', () => shutdown('SIGUSR2'));
  
  // Beklenmeyen hatalar i√ßin
  process.on('uncaughtException', async (error) => {
    console.error('Beklenmeyen hata:', error);
    try {
      await telegramService.sendErrorNotification('Beklenmeyen hata', error.message);
    } catch (notificationError) {
      console.error('Hata bildirimi g√∂nderilemedi:', notificationError);
    }
    process.exit(1);
  });

  process.on('unhandledRejection', async (reason, promise) => {
    console.error('ƒ∞≈ülenmemi≈ü Promise reddi:', reason, 'at:', promise);
    try {
      await telegramService.sendErrorNotification('ƒ∞≈ülenmemi≈ü Promise reddi', String(reason));
    } catch (notificationError) {
      console.error('Hata bildirimi g√∂nderilemedi:', notificationError);
    }
    process.exit(1);
  });
}

// Uygulamayƒ± ba≈ülat
console.log('üî• Visa Checker Bot ba≈ülatƒ±lƒ±yor...');
startApplication().catch((error) => {
  console.error('Kritik ba≈ülatma hatasƒ±:', error);
  process.exit(1);
});